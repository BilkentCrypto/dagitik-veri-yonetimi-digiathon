{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionManagerProvider = exports.useTransactionManager = exports.TransactionManagerContext = void 0;\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst react_1 = require(\"react\");\nconst immutable_1 = require(\"immutable\");\n/** Transaction manager context. */\nexports.TransactionManagerContext = (0, react_1.createContext)({\n  transactions: [],\n  hashes: [],\n  addTransaction: _ref => {\n    let {\n      hash: _hash,\n      metadata: _metadata\n    } = _ref;\n    return undefined;\n  },\n  removeTransaction: _ref2 => {\n    let {\n      hash: _hash\n    } = _ref2;\n    return undefined;\n  }\n});\n/**\n * Hook to manage transaction across different components.\n *\n * @remarks\n *\n * This hook only manages the hashes of the transactions, use the\n * `useTransactions` hook to fetch the state of the transactions.\n *\n * @example\n * This example shows how to fetch the state of tracked transactions\n * and how to add new transactions to the manager.\n *\n * Notice that the transaction manager only accepts the same transaction once.\n * ```tsx\n * function Component() {\n *   const { hashes, addTransaction } = useTransactionManager()\n *   const transactions = useTransactions({ hashes })\n *\n *   return (\n *     <>\n *       <button onClick={() => addTransaction({ hash: txHash, metadata: { test: true } })}>\n *         Add transaction\n *       </button>\n *       <ul>\n *         {transactions.map(({ data }, i) => (\n *           <li key={i}>{data && data.transaction_hash}</li>\n *         ))}\n *       </ul>\n *     </>\n *   )\n * }\n * ```\n */\nfunction useTransactionManager() {\n  const context = (0, react_1.useContext)(exports.TransactionManagerContext);\n  if (!context) {\n    throw new Error('useTransactionManager must be used inside TransactionManagerProvider');\n  }\n  return context;\n}\nexports.useTransactionManager = useTransactionManager;\n/** Context provider for `useTransactionManager`. */\nfunction TransactionManagerProvider(_ref3) {\n  let {\n    children\n  } = _ref3;\n  const [state, dispatch] = (0, react_1.useReducer)(reducer, {\n    hashes: (0, immutable_1.OrderedSet)(),\n    transactions: (0, immutable_1.OrderedMap)()\n  });\n  const addTransaction = (0, react_1.useCallback)(_ref4 => {\n    let {\n      hash,\n      metadata\n    } = _ref4;\n    dispatch({\n      type: 'add_transaction',\n      hash,\n      metadata\n    });\n  }, [dispatch]);\n  const removeTransaction = (0, react_1.useCallback)(_ref5 => {\n    let {\n      hash\n    } = _ref5;\n    dispatch({\n      type: 'remove_transaction',\n      hash\n    });\n  }, [dispatch]);\n  const Provider = exports.TransactionManagerContext.Provider;\n  const transactions = state.transactions;\n  return (0, jsx_runtime_1.jsx)(Provider, {\n    value: {\n      transactions: transactions.valueSeq().toArray(),\n      hashes: transactions.keySeq().toArray(),\n      addTransaction,\n      removeTransaction\n    },\n    children: children\n  });\n}\nexports.TransactionManagerProvider = TransactionManagerProvider;\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add_transaction':\n      {\n        const hashes = state.hashes.add(action.hash);\n        const transactions = state.transactions.set(action.hash, {\n          hash: action.hash,\n          metadata: action.metadata\n        });\n        return {\n          ...state,\n          hashes,\n          transactions\n        };\n      }\n    case 'remove_transaction':\n      {\n        const hashes = state.hashes.remove(action.hash);\n        const transactions = state.transactions.delete(action.hash);\n        return {\n          ...state,\n          hashes,\n          transactions\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"mappings":";;;;;;;AAAA;AACA;AAyBA;AACaA,iCAAyB,GAAG,yBAAa,EAAkC;EACtFC,YAAY,EAAE,EAAE;EAChBC,MAAM,EAAE,EAAE;EACVC,cAAc,EAAE;IAAA,IAAC;MAAEC,IAAI,EAAEC,KAAK;MAAEC,QAAQ,EAAEC;IAAS,CAAE;IAAA,OAAKC,SAAS;EAAA;EACnEC,iBAAiB,EAAE;IAAA,IAAC;MAAEL,IAAI,EAAEC;IAAK,CAAE;IAAA,OAAKG,SAAS;EAAA;CAClD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAgBE,qBAAqB;EACnC,MAAMC,OAAO,GAAG,sBAAU,EACxBX,iCAA2E,CAC5E;EACD,IAAI,CAACW,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,sEAAsE,CAAC;;EAEzF,OAAOD,OAAO;AAChB;AARAX;AAcA;AACA,SAAgBa,0BAA0B,QAER;EAAA,IAF2B;IAC3DC;EAAQ,CACwB;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG,sBAAU,EAACC,OAAO,EAAE;IAC5Cf,MAAM,EAAE,0BAAU,GAAU;IAC5BD,YAAY,EAAE,0BAAU;GACzB,CAAC;EAEF,MAAME,cAAc,GAAG,uBAAW,EAChC,SAAuD;IAAA,IAAtD;MAAEC,IAAI;MAAEE;IAAQ,CAAkC;IACjDU,QAAQ,CAAC;MAAEE,IAAI,EAAE,iBAAiB;MAAEd,IAAI;MAAEE;IAAQ,CAAE,CAAC;EACvD,CAAC,EACD,CAACU,QAAQ,CAAC,CACX;EAED,MAAMP,iBAAiB,GAAG,uBAAW,EACnC,SAA+B;IAAA,IAA9B;MAAEL;IAAI,CAAoB;IACzBY,QAAQ,CAAC;MAAEE,IAAI,EAAE,oBAAoB;MAAEd;IAAI,CAAE,CAAC;EAChD,CAAC,EACD,CAACY,QAAQ,CAAC,CACX;EAED,MAAMG,QAAQ,GAAGnB,iCAAyB,CAACmB,QAE1C;EAED,MAAMlB,YAAY,GAAIc,KAAqC,CAACd,YAAY;EAExE,OACE,uBAACkB,QAAQ;IACPC,KAAK,EAAE;MACLnB,YAAY,EAAEA,YAAY,CAACoB,QAAQ,EAAE,CAACC,OAAO,EAAE;MAC/CpB,MAAM,EAAED,YAAY,CAACsB,MAAM,EAAE,CAACD,OAAO,EAAE;MACvCnB,cAAc;MACdM;KACD;IAAAK,UAEAA;EAAQ,EACA;AAEf;AAxCAd;AA4DA,SAASiB,OAAO,CACdF,KAAuB,EACvBS,MAAyB;EAEzB,QAAQA,MAAM,CAACN,IAAI;IACjB,KAAK,iBAAiB;MAAE;QACtB,MAAMhB,MAAM,GAAGa,KAAK,CAACb,MAAM,CAACuB,GAAG,CAACD,MAAM,CAACpB,IAAI,CAAC;QAC5C,MAAMH,YAAY,GAAGc,KAAK,CAACd,YAAY,CAACyB,GAAG,CAACF,MAAM,CAACpB,IAAI,EAAE;UACvDA,IAAI,EAAEoB,MAAM,CAACpB,IAAI;UACjBE,QAAQ,EAAEkB,MAAM,CAAClB;SAClB,CAAC;QACF,OAAO;UAAE,GAAGS,KAAK;UAAEb,MAAM;UAAED;QAAY,CAAE;;IAE3C,KAAK,oBAAoB;MAAE;QACzB,MAAMC,MAAM,GAAGa,KAAK,CAACb,MAAM,CAACyB,MAAM,CAACH,MAAM,CAACpB,IAAI,CAAC;QAC/C,MAAMH,YAAY,GAAGc,KAAK,CAACd,YAAY,CAAC2B,MAAM,CAACJ,MAAM,CAACpB,IAAI,CAAC;QAC3D,OAAO;UAAE,GAAGW,KAAK;UAAEb,MAAM;UAAED;QAAY,CAAE;;IAE3C;MAAS;QACP,OAAOc,KAAK;;EACb;AAEL","names":["exports","transactions","hashes","addTransaction","hash","_hash","metadata","_metadata","undefined","removeTransaction","useTransactionManager","context","Error","TransactionManagerProvider","children","state","dispatch","reducer","type","Provider","value","valueSeq","toArray","keySeq","action","add","set","remove","delete"],"sources":["../../src/providers/transaction.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}