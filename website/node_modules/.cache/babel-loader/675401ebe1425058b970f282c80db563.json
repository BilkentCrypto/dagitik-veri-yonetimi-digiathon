{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar React = require('react');\nvar useSyncExternalStore = require('./useSyncExternalStore');\nvar queryCore = require('@tanstack/query-core');\nvar QueryErrorResetBoundary = require('./QueryErrorResetBoundary.js');\nvar QueryClientProvider = require('./QueryClientProvider.js');\nvar isRestoring = require('./isRestoring.js');\nvar errorBoundaryUtils = require('./errorBoundaryUtils.js');\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nfunction useBaseQuery(options, Observer) {\n  const queryClient = QueryClientProvider.useQueryClient({\n    context: options.context\n  });\n  const isRestoring$1 = isRestoring.useIsRestoring();\n  const errorResetBoundary = QueryErrorResetBoundary.useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions._optimisticResults = isRestoring$1 ? 'isRestoring' : 'optimistic'; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = queryCore.notifyManager.batchCalls(defaultedOptions.onError);\n  }\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = queryCore.notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = queryCore.notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n  errorBoundaryUtils.ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  errorBoundaryUtils.useClearResetErrorBoundary(errorResetBoundary);\n  const [observer] = React__namespace.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore.useSyncExternalStore(React__namespace.useCallback(onStoreChange => isRestoring$1 ? () => undefined : observer.subscribe(queryCore.notifyManager.batchCalls(onStoreChange)), [observer, isRestoring$1]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React__namespace.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring$1) {\n    throw observer.fetchOptimistic(defaultedOptions).then(_ref => {\n      let {\n        data\n      } = _ref;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(error => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n  if (errorBoundaryUtils.getHasError({\n    result,\n    errorResetBoundary,\n    useErrorBoundary: defaultedOptions.useErrorBoundary,\n    query: observer.getCurrentQuery()\n  })) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\nexports.useBaseQuery = useBaseQuery;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeO,SAASA,YAAT,CAOLC,OAPK,EAcLC,QAdK,EAeL;EACA,MAAMC,WAAW,GAAGC,kCAAc,CAAC;IAAEC,OAAO,EAAEJ,OAAO,CAACI;EAAnB,CAAD,CAAlC;EACA,MAAMC,aAAW,GAAGC,0BAAc,EAAlC;EACA,MAAMC,kBAAkB,GAAGC,kDAA0B,EAArD;EACA,MAAMC,gBAAgB,GAAGP,WAAW,CAACQ,mBAAZ,CAAgCV,OAAhC,CAAzB,CAJA;;EAOAS,gBAAgB,CAACE,kBAAjB,GAAsCN,aAAW,GAC7C,aAD6C,GAE7C,YAFJ,CAPA;;EAYA,IAAII,gBAAgB,CAACG,OAArB,EAA8B;IAC5BH,gBAAgB,CAACG,OAAjB,GAA2BC,SAAa,eAACC,UAAd,CACzBL,gBAAgB,CAACG,OADQ,CAA3B;EAGD;EAED,IAAIH,gBAAgB,CAACM,SAArB,EAAgC;IAC9BN,gBAAgB,CAACM,SAAjB,GAA6BF,SAAa,eAACC,UAAd,CAC3BL,gBAAgB,CAACM,SADU,CAA7B;EAGD;EAED,IAAIN,gBAAgB,CAACO,SAArB,EAAgC;IAC9BP,gBAAgB,CAACO,SAAjB,GAA6BH,SAAa,eAACC,UAAd,CAC3BL,gBAAgB,CAACO,SADU,CAA7B;EAGD;EAED,IAAIP,gBAAgB,CAACQ,QAArB,EAA+B;IAC7B;IACA;IACA,IAAI,OAAOR,gBAAgB,CAACS,SAAxB,KAAsC,QAA1C,EAAoD;MAClDT,gBAAgB,CAACS,SAAjB,GAA6B,IAA7B;IACD;EACF;EAEDC,kDAA+B,CAACV,gBAAD,EAAmBF,kBAAnB,CAA/B;EAEAa,kBAA0B,4BAACb,kBAAD,CAA1B;EAEA,MAAM,CAACc,QAAD,CAAaC,mBAAK,CAACC,QAAN,CACjB,MACE,IAAItB,QAAJ,CACEC,WADF,EAEEO,gBAFF,CAFe,CAAnB;EAQA,MAAMe,MAAM,GAAGH,QAAQ,CAACI,mBAAT,CAA6BhB,gBAA7B,CAAf;EAEAiB,yCAAoB,CAClBJ,gBAAK,CAACK,WAAN,CACGC,aAAD,IACEvB,aAAW,GACP,MAAMwB,SADC,GAEPR,QAAQ,CAACS,SAAT,CAAmBjB,SAAa,eAACC,UAAd,CAAyBc,aAAzB,CAAnB,CAJR,EAKE,CAACP,QAAD,EAAWhB,aAAX,CALF,CADkB,EAQlB,MAAMgB,QAAQ,CAACU,gBAAT,EARY,EASlB,MAAMV,QAAQ,CAACU,gBAAT,EATY,CAApB;EAYAT,gBAAK,CAACU,SAAN,CAAgB,MAAM;IACpB;IACA;IACAX,QAAQ,CAACY,UAAT,CAAoBxB,gBAApB,EAAsC;MAAEyB,SAAS,EAAE;KAAnD;EACD,CAJD,EAIG,CAACzB,gBAAD,EAAmBY,QAAnB,CAJH,EAhEA;;EAuEA,IACEZ,gBAAgB,CAACQ,QAAjB,IACAO,MAAM,CAACW,SADP,IAEAX,MAAM,CAACY,UAFP,IAGA,CAAC/B,aAJH,EAKE;IACA,MAAMgB,QAAQ,CACXgB,eADG,CACa5B,gBADb,CAEH6B,KAFG,CAEE,QAAc;MAAA,IAAb;QAAEC;MAAF,CAAD;MACJ9B,gBAAgB,CAACM,SAAjB,oCAAgB,CAACA,SAAjB,CAA6BwB,IAA7B;MACA9B,gBAAgB,CAACO,SAAjB,oCAAgB,CAACA,SAAjB,CAA6BuB,IAA7B,EAAmC,IAAnC;IACD,CALG,CAMHC,MANG,CAMIC,KAAD,IAAW;MAChBlC,kBAAkB,CAACmC,UAAnB;MACAjC,gBAAgB,CAACG,OAAjB,oCAAgB,CAACA,OAAjB,CAA2B6B,KAA3B;MACAhC,gBAAgB,CAACO,SAAjB,oCAAgB,CAACA,SAAjB,CAA6Ba,SAA7B,EAAwCY,KAAxC;IACD,CAVG,CAAN;EA7EF;;EA2FA,IACEE,8BAAW,CAAC;IACVnB,MADU;IAEVjB,kBAFU;IAGVqC,gBAAgB,EAAEnC,gBAAgB,CAACmC,gBAHzB;IAIVC,KAAK,EAAExB,QAAQ,CAACyB,eAAT;EAJG,CAAD,CADb,EAOE;IACA,MAAMtB,MAAM,CAACiB,KAAb;EAnGF;;EAuGA,OAAO,CAAChC,gBAAgB,CAACsC,mBAAlB,GACH1B,QAAQ,CAAC2B,WAAT,CAAqBxB,MAArB,CADG,GAEHA,MAFJ;AAGD","names":["useBaseQuery","options","Observer","queryClient","useQueryClient","context","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedOptions","defaultQueryOptions","_optimisticResults","onError","notifyManager","batchCalls","onSuccess","onSettled","suspense","staleTime","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","observer","React","useState","result","getOptimisticResult","useSyncExternalStore","useCallback","onStoreChange","undefined","subscribe","getCurrentResult","useEffect","setOptions","listeners","isLoading","isFetching","fetchOptimistic","then","data","catch","error","clearReset","getHasError","useErrorBoundary","query","getCurrentQuery","notifyOnChangeProps","trackResult"],"sources":["/Users/utkukoca/Desktop/Project-Challange/my-project/node_modules/@tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (\n    defaultedOptions.suspense &&\n    result.isLoading &&\n    result.isFetching &&\n    !isRestoring\n  ) {\n    throw observer\n      .fetchOptimistic(defaultedOptions)\n      .then(({ data }) => {\n        defaultedOptions.onSuccess?.(data as TData)\n        defaultedOptions.onSettled?.(data, null)\n      })\n      .catch((error) => {\n        errorResetBoundary.clearReset()\n        defaultedOptions.onError?.(error)\n        defaultedOptions.onSettled?.(undefined, error)\n      })\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"]},"metadata":{},"sourceType":"script"}