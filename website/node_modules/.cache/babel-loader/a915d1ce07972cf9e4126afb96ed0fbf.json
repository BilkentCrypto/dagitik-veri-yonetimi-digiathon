{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useStarknetCall = void 0;\nconst react_query_1 = require(\"@tanstack/react-query\");\nconst react_1 = require(\"react\");\nconst providers_1 = require(\"../providers\");\nconst invalidate_1 = require(\"./invalidate\");\n/**\n * Hook to perform a read-only contract call.\n *\n * @remarks\n *\n * The hook only performs a call if the target `contract`,\n * `method`, and `args` are not undefined.\n *\n * @example\n * This example shows how to fetch the user ERC-20 balance.\n * ```tsx\n * function Component() {\n *   const { contract } = useContract({\n *     address: ethAddress,\n *     abi: compiledErc20.abi\n *   })\n *   const { address } = useAccount()\n *   const { data, loading, error, refresh } = useStarknetCall({\n *     contract,\n *     method: 'balanceOf',\n *     args: [address],\n *     options: {\n *       watch: false\n *     }\n *   })\n *\n *   if (loading) return <span>Loading...</span>\n *   if (error) return <span>Error: {error}</span>\n *\n *   return (\n *     <div>\n *       <button onClick={refresh}>Refresh</button>\n *       <p>Balance: {JSON.stringify(data)}</p>\n *     </div>\n *   )\n * }\n * ```\n */\nfunction useStarknetCall(_ref) {\n  let {\n    contract,\n    method,\n    args,\n    options\n  } = _ref;\n  const {\n    library\n  } = (0, providers_1.useStarknet)();\n  const blockIdentifier = options?.blockIdentifier || 'pending';\n  const queryKey_ = (0, react_1.useMemo)(() => queryKey({\n    library,\n    args: {\n      contract,\n      method,\n      args,\n      blockIdentifier\n    }\n  }), [library, contract, method, args, blockIdentifier]);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const {\n    data,\n    isLoading,\n    isError,\n    refetch,\n    isRefetching\n  } = (0, react_query_1.useQuery)(queryKey_, readContract({\n    args: {\n      contract,\n      method,\n      args,\n      blockIdentifier\n    }\n  }));\n  (0, invalidate_1.useInvalidateOnBlock)({\n    enabled: options?.watch,\n    queryKey: queryKey_\n  });\n  return {\n    data,\n    loading: isLoading,\n    refreshing: isRefetching,\n    refresh: refetch,\n    error: isError ? 'error performing call' : undefined\n  };\n}\nexports.useStarknetCall = useStarknetCall;\nfunction readContract(_ref2) {\n  let {\n    args\n  } = _ref2;\n  return async () => {\n    if (!args.args || !args.contract || !args.method) return null;\n    const call = args.contract && args.method && args.contract[args.method];\n    if (!call) return null;\n    return await call(...args.args, {\n      blockIdentifier: args.blockIdentifier\n    });\n  };\n}\nfunction queryKey(_ref3) {\n  let {\n    library,\n    args\n  } = _ref3;\n  const {\n    contract,\n    method,\n    args: callArgs,\n    blockIdentifier\n  } = args;\n  return [{\n    entity: 'readContract',\n    chainId: library.chainId,\n    contract: contract?.address,\n    method,\n    args: callArgs,\n    blockIdentifier\n  }];\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAIA;AACA;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAAgBA,eAAe,OAKL;EAAA,IAL2B;IACnDC,QAAQ;IACRC,MAAM;IACNC,IAAI;IACJC;EAAO,CACiB;EACxB,MAAM;IAAEC;EAAO,CAAE,GAAG,2BAAW,GAAE;EAEjC,MAAMC,eAAe,GAAGF,OAAO,EAAEE,eAAe,IAAI,SAAS;EAE7D,MAAMC,SAAS,GAAG,mBAAO,EACvB,MAAMC,QAAQ,CAAC;IAAEH,OAAO;IAAEF,IAAI,EAAE;MAAEF,QAAQ;MAAEC,MAAM;MAAEC,IAAI;MAAEG;IAAe;EAAE,CAAE,CAAC,EAC9E,CAACD,OAAO,EAAEJ,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAEG,eAAe,CAAC,CACnD;EAED;EACA,MAAM;IAAEG,IAAI;IAAEC,SAAS;IAAEC,OAAO;IAAEC,OAAO;IAAEC;EAAY,CAAE,GAAG,0BAAQ,EAClEN,SAAS,EACTO,YAAY,CAAC;IAAEX,IAAI,EAAE;MAAEF,QAAQ;MAAEC,MAAM;MAAEC,IAAI;MAAEG;IAAe;EAAE,CAAE,CAAC,CACpE;EAED,qCAAoB,EAAC;IAAES,OAAO,EAAEX,OAAO,EAAEY,KAAK;IAAER,QAAQ,EAAED;EAAS,CAAE,CAAC;EAEtE,OAAO;IACLE,IAAI;IACJQ,OAAO,EAAEP,SAAS;IAClBQ,UAAU,EAAEL,YAAY;IACxBM,OAAO,EAAEP,OAAO;IAChBQ,KAAK,EAAET,OAAO,GAAG,uBAAuB,GAAGU;GAC5C;AACH;AA9BAC;AAuCA,SAASR,YAAY,QAAqC;EAAA,IAApC;IAAEX;EAAI,CAA8B;EACxD,OAAO,YAAW;IAChB,IAAI,CAACA,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACF,QAAQ,IAAI,CAACE,IAAI,CAACD,MAAM,EAAE,OAAO,IAAI;IAC7D,MAAMqB,IAAI,GAAGpB,IAAI,CAACF,QAAQ,IAAIE,IAAI,CAACD,MAAM,IAAIC,IAAI,CAACF,QAAQ,CAACE,IAAI,CAACD,MAAM,CAAC;IACvE,IAAI,CAACqB,IAAI,EAAE,OAAO,IAAI;IAEtB,OAAO,MAAMA,IAAI,CAAC,GAAGpB,IAAI,CAACA,IAAI,EAAE;MAC9BG,eAAe,EAAEH,IAAI,CAACG;KACvB,CAAC;EACJ,CAAC;AACH;AAEA,SAASE,QAAQ,QAA0E;EAAA,IAAzE;IAAEH,OAAO;IAAEF;EAAI,CAA0D;EACzF,MAAM;IAAEF,QAAQ;IAAEC,MAAM;IAAEC,IAAI,EAAEqB,QAAQ;IAAElB;EAAe,CAAE,GAAGH,IAAI;EAClE,OAAO,CACL;IACEsB,MAAM,EAAE,cAAc;IACtBC,OAAO,EAAErB,OAAO,CAACqB,OAAO;IACxBzB,QAAQ,EAAEA,QAAQ,EAAE0B,OAAO;IAC3BzB,MAAM;IACNC,IAAI,EAAEqB,QAAQ;IACdlB;GACD,CACO;AACZ","names":["useStarknetCall","contract","method","args","options","library","blockIdentifier","queryKey_","queryKey","data","isLoading","isError","refetch","isRefetching","readContract","enabled","watch","loading","refreshing","refresh","error","undefined","exports","call","callArgs","entity","chainId","address"],"sources":["../../src/hooks/call.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}