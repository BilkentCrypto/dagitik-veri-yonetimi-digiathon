{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAccount = void 0;\nconst react_1 = require(\"react\");\nconst connectors_1 = require(\"./connectors\");\nconst providers_1 = require(\"../providers\");\n/**\n * Hook for accessing the account and its connection status.\n *\n * @remarks\n *\n * This hook is used to access the `AccountInterface` object provided by the\n * currently connected wallet.\n *\n * @example\n * This example shows how to display the wallet connection status and\n * the currently connected wallet address.\n * ```tsx\n * function Component() {\n *   const { account, address, status } = useAccount()\n *\n *   if (status === 'disconnected') return <p>Disconnected</p>\n *   return <p>Account: {address}</p>\n * }\n * ```\n */\nfunction useAccount() {\n  const {\n    account: connectedAccount\n  } = (0, providers_1.useStarknet)();\n  const {\n    connectors\n  } = (0, connectors_1.useConnectors)();\n  const [state, setState] = (0, react_1.useState)({\n    status: 'disconnected'\n  });\n  const refreshState = (0, react_1.useCallback)(async () => {\n    if (!connectedAccount) {\n      return setState({\n        status: 'disconnected'\n      });\n    }\n    for (const connector of connectors) {\n      if (!connector.available()) continue;\n      const connAccount = await connector.account();\n      if (connAccount && connAccount?.address === connectedAccount) {\n        return setState({\n          connector,\n          account: connAccount,\n          address: connectedAccount,\n          status: 'connected'\n        });\n      }\n    }\n  }, [setState, connectedAccount, connectors]);\n  (0, react_1.useEffect)(() => {\n    refreshState();\n  }, [refreshState]);\n  return state;\n}\nexports.useAccount = useAccount;","map":{"version":3,"mappings":";;;;;;AAAA;AAGA;AACA;AAmBA;;;;;;;;;;;;;;;;;;;;AAoBA,SAAgBA,UAAU;EACxB,MAAM;IAAEC,OAAO,EAAEC;EAAgB,CAAE,GAAG,2BAAW,GAAE;EACnD,MAAM;IAAEC;EAAU,CAAE,GAAG,8BAAa,GAAE;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG,oBAAQ,EAAmB;IAAEC,MAAM,EAAE;EAAc,CAAE,CAAC;EAEhF,MAAMC,YAAY,GAAG,uBAAW,EAAC,YAAW;IAC1C,IAAI,CAACL,gBAAgB,EAAE;MACrB,OAAOG,QAAQ,CAAC;QACdC,MAAM,EAAE;OACT,CAAC;;IAEJ,KAAK,MAAME,SAAS,IAAIL,UAAU,EAAE;MAClC,IAAI,CAACK,SAAS,CAACC,SAAS,EAAE,EAAE;MAC5B,MAAMC,WAAW,GAAG,MAAMF,SAAS,CAACP,OAAO,EAAE;MAC7C,IAAIS,WAAW,IAAIA,WAAW,EAAEC,OAAO,KAAKT,gBAAgB,EAAE;QAC5D,OAAOG,QAAQ,CAAC;UACdG,SAAS;UACTP,OAAO,EAAES,WAAW;UACpBC,OAAO,EAAET,gBAAgB;UACzBI,MAAM,EAAE;SACT,CAAC;;;EAGR,CAAC,EAAE,CAACD,QAAQ,EAAEH,gBAAgB,EAAEC,UAAU,CAAC,CAAC;EAE5C,qBAAS,EAAC,MAAK;IACbI,YAAY,EAAE;EAChB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,OAAOH,KAAK;AACd;AA9BAQ","names":["useAccount","account","connectedAccount","connectors","state","setState","status","refreshState","connector","available","connAccount","address","exports"],"sources":["../../src/hooks/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}