{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar React = require('react');\nvar queryCore = require('@tanstack/query-core');\nvar QueryClientProvider = require('./QueryClientProvider.js');\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nfunction useHydrate(state) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const queryClient = QueryClientProvider.useQueryClient({\n    context: options.context\n  });\n  const optionsRef = React__namespace.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React__namespace.useMemo(() => {\n    if (state) {\n      queryCore.hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nconst Hydrate = _ref => {\n  let {\n    children,\n    options,\n    state\n  } = _ref;\n  useHydrate(state, options);\n  return children;\n};\nexports.Hydrate = Hydrate;\nexports.useHydrate = useHydrate;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO,SAASA,UAAT,CACLC,KADK,EAGL;EAAA,IADAC,OAAwC,uEAAG,EAFtC;EAIL,MAAMC,WAAW,GAAGC,kCAAc,CAAC;IAAEC,OAAO,EAAEH,OAAO,CAACG;EAAnB,CAAD,CAAlC;EAEA,MAAMC,UAAU,GAAGC,gBAAK,CAACC,MAAN,CAAaN,OAAb,CAAnB;EACAI,UAAU,CAACG,OAAX,GAAqBP,OAArB,CAJA;EAOA;EACA;EACA;;EACAK,gBAAK,CAACG,OAAN,CAAc,MAAM;IAClB,IAAIT,KAAJ,EAAW;MACTU,iBAAO,CAACR,WAAD,EAAcF,KAAd,EAAqBK,UAAU,CAACG,OAAhC,CAAP;IACD;EACF,CAJD,EAIG,CAACN,WAAD,EAAcF,KAAd,CAJH;AAKD;AAQM,MAAMW,OAAO,GAAG,QAAgD;EAAA,IAA/C;IAAEC,QAAF;IAAYX,OAAZ;IAAqBD;EAArB,CAAD;EACrBD,UAAU,CAACC,KAAD,EAAQC,OAAR,CAAV;EACA,OAAOW,QAAP;AACD","names":["useHydrate","state","options","queryClient","useQueryClient","context","optionsRef","React","useRef","current","useMemo","hydrate","Hydrate","children"],"sources":["/Users/utkukoca/Desktop/Project-Challange/my-project/node_modules/@tanstack/react-query/src/Hydrate.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport type { HydrateOptions } from '@tanstack/query-core'\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { ContextOptions } from './types'\n\nexport function useHydrate(\n  state: unknown,\n  options: HydrateOptions & ContextOptions = {},\n) {\n  const queryClient = useQueryClient({ context: options.context })\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n"]},"metadata":{},"sourceType":"script"}