{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useDeploy = void 0;\nconst react_query_1 = require(\"@tanstack/react-query\");\n/**\n * Hook to deploy a StarkNet contract.\n *\n * @remarks\n *\n * You should check that `contractFactory` is defined before calling `deploy`,\n * or the call will fail.\n *\n * The transaction is submitted from the provider passed to the contract factory,\n * so ensure to use the currently connected account.\n *\n * @example\n * This example shows how to deploy a contract from the currently connected account.\n * ```tsx\n * function Component() {\n *   const { account, address } = useAccount()\n *   const { contractFactory } = useContractFactory({\n *     compiledContract: compiledErc20,\n *     providerOrAccount: account\n *   })\n *\n *   // notice constructor args are felt encoded\n *   const constructorCalldata = useMemo(() => [\n *     encodeShortString('StarkNet React'), // name\n *     encodeShortString('SNR'), // symbol\n *     18, // decimals\n *     10000, // initial_supply.low\n *     0, // initial_supply.high\n *     address, // recipient\n *     address, // owner\n *   ], [address])\n *\n *   const { deploy, error } = useDeploy({\n *     contractFactory,\n *     constructorCalldata\n *   })\n *\n *   return (\n *     <>\n *       <button onClick={deploy}>Deploy contract</button>\n *       {error && <p>Error: {JSON.stringify(error)}</p>}\n *     </>\n *   )\n * }\n * ```\n */\nfunction useDeploy(_ref) {\n  let {\n    contractFactory,\n    constructorCalldata,\n    addressSalt\n  } = _ref;\n  const {\n    data,\n    isLoading,\n    error,\n    reset,\n    mutateAsync\n  } = (0, react_query_1.useMutation)(deployContract({\n    contractFactory,\n    constructorCalldata,\n    addressSalt\n  }));\n  return {\n    data,\n    loading: isLoading,\n    error: error ?? undefined,\n    reset,\n    deploy: mutateAsync\n  };\n}\nexports.useDeploy = useDeploy;\nfunction deployContract(_ref2) {\n  let {\n    contractFactory,\n    constructorCalldata,\n    addressSalt\n  } = _ref2;\n  return async () => {\n    if (contractFactory === undefined) {\n      throw new Error('No contract factory defined');\n    }\n    return await contractFactory.deploy(constructorCalldata, addressSalt);\n  };\n}","map":{"version":3,"mappings":";;;;;;AAAA;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,SAAgBA,SAAS,OAIR;EAAA,IAJS;IACxBC,eAAe;IACfC,mBAAmB;IACnBC;EAAW,CACI;EACf,MAAM;IAAEC,IAAI;IAAEC,SAAS;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAW,CAAE,GAAG,6BAAW,EAChEC,cAAc,CAAC;IAAER,eAAe;IAAEC,mBAAmB;IAAEC;EAAW,CAAE,CAAC,CACtE;EAED,OAAO;IACLC,IAAI;IACJM,OAAO,EAAEL,SAAS;IAClBC,KAAK,EAAEA,KAAK,IAAIK,SAAS;IACzBJ,KAAK;IACLK,MAAM,EAAEJ;GACT;AACH;AAhBAK;AAkBA,SAASJ,cAAc,QAAsE;EAAA,IAArE;IAAER,eAAe;IAAEC,mBAAmB;IAAEC;EAAW,CAAkB;EAC3F,OAAO,YAAW;IAChB,IAAIF,eAAe,KAAKU,SAAS,EAAE;MACjC,MAAM,IAAIG,KAAK,CAAC,6BAA6B,CAAC;;IAEhD,OAAO,MAAMb,eAAe,CAACW,MAAM,CAACV,mBAAmB,EAAEC,WAAW,CAAC;EACvE,CAAC;AACH","names":["useDeploy","contractFactory","constructorCalldata","addressSalt","data","isLoading","error","reset","mutateAsync","deployContract","loading","undefined","deploy","exports","Error"],"sources":["../../src/hooks/deploy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}