{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useConnectors = void 0;\nconst react_1 = require(\"react\");\nconst providers_1 = require(\"../providers\");\n/**\n * Hook to work with connectors.\n *\n * @remarks\n *\n * This hook is the recommended way to interact with the connectors.\n *\n * Notice that the `available` connectors are computed as soon as the hook is\n * rendered, which could happen _before_ the browser wallets had the opportunity\n * to inject themselves in the page.\n *\n * The best practice is to periodically `refresh` the available connectors.\n *\n * @example\n * This example shows all registered connectors and connects\n * to the specified one.\n * ```tsx\n * function Component() {\n *   const { connect, connectors } = useConnectors()\n *\n *   return (\n *     <ul>\n *       {connectors.map((connector) => (\n *         <li key={connector.id()}>\n *           <button onClick={() => connect(connector)}>\n *             Connect {connector.id()}\n *           </button>\n *         </li>\n *       ))}\n *     </ul>\n *   )\n * }\n * ```\n *\n * @example\n * This example shows how to refresh the available connectors\n * every 5 seconds.\n * ```tsx\n * function Component() {\n *   const { available, refresh } = useConnectors()\n *\n *   useEffect(() => {\n *     const interval = setInterval(refresh, 5000)\n *     return () => clearInterval(interval)\n *   }, [refresh])\n *\n *   return (\n *     <ul>\n *       {available.map((connector) => (\n *         <li key={connector.id()}>\n *          {connector.id()}\n *         </li>\n *       ))}\n *     </ul>\n *   )\n * }\n * ```\n */\nfunction useConnectors() {\n  const {\n    connectors,\n    connect,\n    disconnect\n  } = (0, providers_1.useStarknet)();\n  const [available, setAvailable] = (0, react_1.useState)([]);\n  (0, react_1.useEffect)(() => {\n    setAvailable(connectors.filter(conn => conn.available()));\n  }, [connectors, setAvailable]);\n  const refresh = (0, react_1.useCallback)(() => {\n    setAvailable(connectors.filter(conn => conn.available()));\n  }, [connectors, setAvailable]);\n  return {\n    available,\n    connectors,\n    connect,\n    disconnect,\n    refresh\n  };\n}\nexports.useConnectors = useConnectors;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA,SAAgBA,aAAa;EAC3B,MAAM;IAAEC,UAAU;IAAEC,OAAO;IAAEC;EAAU,CAAE,GAAG,2BAAW,GAAE;EACzD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG,oBAAQ,EAAc,EAAE,CAAC;EAE3D,qBAAS,EAAC,MAAK;IACbA,YAAY,CAACJ,UAAU,CAACK,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACH,SAAS,EAAE,CAAC,CAAC;EAC7D,CAAC,EAAE,CAACH,UAAU,EAAEI,YAAY,CAAC,CAAC;EAE9B,MAAMG,OAAO,GAAG,uBAAW,EAAC,MAAK;IAC/BH,YAAY,CAACJ,UAAU,CAACK,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACH,SAAS,EAAE,CAAC,CAAC;EAC7D,CAAC,EAAE,CAACH,UAAU,EAAEI,YAAY,CAAC,CAAC;EAE9B,OAAO;IAAED,SAAS;IAAEH,UAAU;IAAEC,OAAO;IAAEC,UAAU;IAAEK;EAAO,CAAE;AAChE;AAbAC","names":["useConnectors","connectors","connect","disconnect","available","setAvailable","filter","conn","refresh","exports"],"sources":["../../src/hooks/connectors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}