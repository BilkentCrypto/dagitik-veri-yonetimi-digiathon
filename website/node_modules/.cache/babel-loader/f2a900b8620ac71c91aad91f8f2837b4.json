{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useStarknetExecute = void 0;\nconst react_query_1 = require(\"@tanstack/react-query\");\nconst account_1 = require(\"./account\");\n/**\n * Hook to perform a StarkNet multicall.\n *\n * @remarks\n *\n * Multicalls are used to submit multiple transactions in a single\n * call to improve user experience.\n *\n * @example\n * This example shows how to dynamically add transactions to the multicall.\n * ```tsx\n * function Component() {\n *   const { address } = useAccount()\n *   const [count, setCount] = useState(0)\n *\n *   const calls = useMemo(() => {\n *     const tx = {\n *       contractAddress: ethAddress,\n *       entrypoint: 'transfer',\n *       calldata: [address, 1, 0]\n *     }\n *     return Array(count).fill(tx)\n *   }, [address, count])\n *\n *   const { execute } = useStarknetExecute({ calls })\n *\n *   const inc = useCallback(\n *     () => setCount(c => c + 1),\n *     [setCount]\n *   )\n *   const dec = useCallback(\n *     () => setCount(c => Math.max(c - 1)),\n *     [setCount]\n *   )\n *\n *   return (\n *     <>\n *       <p>Sending {count} transactions</p>\n *       <p>\n *         <button onClick={dec}>Decrement</button>\n *         <button onClick={inc}>Increment</button>\n *       </p>\n *       <p>\n *         <button onClick={execute}>Execute</button>\n *       </p>\n *     </>\n *   )\n * }\n * ```\n */\nfunction useStarknetExecute(_ref) {\n  let {\n    calls,\n    metadata\n  } = _ref;\n  const {\n    account\n  } = (0, account_1.useAccount)();\n  const {\n    data,\n    isLoading,\n    error,\n    reset,\n    mutateAsync\n  } = (0, react_query_1.useMutation)(writeContract({\n    account,\n    args: {\n      calls,\n      metadata\n    }\n  }));\n  return {\n    data,\n    loading: isLoading,\n    error: error ?? undefined,\n    reset,\n    execute: mutateAsync\n  };\n}\nexports.useStarknetExecute = useStarknetExecute;\nfunction writeContract(_ref2) {\n  let {\n    account,\n    args\n  } = _ref2;\n  return async () => {\n    const {\n      calls,\n      metadata\n    } = args;\n    if (account === undefined) {\n      throw new Error('No connector connected');\n    }\n    if (calls === undefined) {\n      throw new Error('No calls specified');\n    }\n    const response = await account.execute(calls);\n    console.warn(`TODO: ignoring metadata`, metadata);\n    return response;\n  };\n}","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,SAAgBA,kBAAkB,OAA4C;EAAA,IAA3C;IAAEC,KAAK;IAAEC;EAAQ,CAA0B;EAC5E,MAAM;IAAEC;EAAO,CAAE,GAAG,wBAAU,GAAE;EAChC,MAAM;IAAEC,IAAI;IAAEC,SAAS;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAW,CAAE,GAAG,6BAAW,EAChEC,aAAa,CAAC;IAAEN,OAAO;IAAEO,IAAI,EAAE;MAAET,KAAK;MAAEC;IAAQ;EAAE,CAAE,CAAC,CACtD;EAED,OAAO;IACLE,IAAI;IACJO,OAAO,EAAEN,SAAS;IAClBC,KAAK,EAAEA,KAAK,IAAIM,SAAS;IACzBL,KAAK;IACLM,OAAO,EAAEL;GACV;AACH;AAbAM;AAeA,SAASL,aAAa,QAMrB;EAAA,IANsB;IACrBN,OAAO;IACPO;EAAI,CAIL;EACC,OAAO,YAAW;IAChB,MAAM;MAAET,KAAK;MAAEC;IAAQ,CAAE,GAAGQ,IAAI;IAChC,IAAIP,OAAO,KAAKS,SAAS,EAAE;MACzB,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;;IAE3C,IAAId,KAAK,KAAKW,SAAS,EAAE;MACvB,MAAM,IAAIG,KAAK,CAAC,oBAAoB,CAAC;;IAEvC,MAAMC,QAAQ,GAAG,MAAMb,OAAO,CAACU,OAAO,CAACZ,KAAK,CAAC;IAC7CgB,OAAO,CAACC,IAAI,CAAC,yBAAyB,EAAEhB,QAAQ,CAAC;IACjD,OAAOc,QAAQ;EACjB,CAAC;AACH","names":["useStarknetExecute","calls","metadata","account","data","isLoading","error","reset","mutateAsync","writeContract","args","loading","undefined","execute","exports","Error","response","console","warn"],"sources":["../../src/hooks/execute.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}