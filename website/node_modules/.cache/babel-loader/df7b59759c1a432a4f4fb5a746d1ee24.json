{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StarknetProvider = exports.useStarknet = void 0;\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst react_query_1 = require(\"@tanstack/react-query\");\nconst react_1 = require(\"react\");\nconst starknet_1 = require(\"starknet\");\nconst errors_1 = require(\"../errors\");\nconst STARKNET_INITIAL_STATE = {\n  account: undefined,\n  connect: () => undefined,\n  disconnect: () => undefined,\n  library: starknet_1.defaultProvider,\n  connectors: []\n};\nconst StarknetContext = (0, react_1.createContext)(STARKNET_INITIAL_STATE);\n/**\n * Returns the current StarkNet context state.\n *\n * @remarks\n *\n * This hook should be used sparingly and will be deprecated.\n *\n * Use the following hooks:\n *\n *  - `account`: `useAccount`\n *  - `connect`, `disconnect`, `connectors`: `useConnectors`\n *\n * @example\n * This example shows how to access the StarkNet provider.\n * ```tsx\n * function Component() {\n *   const { library } = useStarknet()\n *\n *   if (!library.provider) return <span>Account URL: {library.baseUrl}</span>\n *   return <span>Provider URL: {library.provider.baseUrl}</span>\n * }\n * ```\n */\nfunction useStarknet() {\n  return (0, react_1.useContext)(StarknetContext);\n}\nexports.useStarknet = useStarknet;\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'set_account':\n      {\n        return {\n          ...state,\n          account: action.account\n        };\n      }\n    case 'set_provider':\n      {\n        return {\n          ...state,\n          library: action.provider ?? starknet_1.defaultProvider\n        };\n      }\n    case 'set_connector':\n      {\n        return {\n          ...state,\n          connector: action.connector\n        };\n      }\n    case 'set_error':\n      {\n        return {\n          ...state,\n          error: action.error\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}\nfunction useStarknetManager(_ref) {\n  let {\n    defaultProvider: userDefaultProvider,\n    connectors: userConnectors,\n    autoConnect\n  } = _ref;\n  const connectors = userConnectors ?? [];\n  const [state, dispatch] = (0, react_1.useReducer)(reducer, {\n    library: userDefaultProvider ? userDefaultProvider : starknet_1.defaultProvider,\n    connectors\n  });\n  const {\n    account,\n    library,\n    error\n  } = state;\n  const connect = (0, react_1.useCallback)(connector => {\n    connector.connect().then(account => {\n      dispatch({\n        type: 'set_account',\n        account: account.address\n      });\n      dispatch({\n        type: 'set_provider',\n        provider: account\n      });\n      dispatch({\n        type: 'set_connector',\n        connector\n      });\n      if (autoConnect) {\n        localStorage.setItem('lastUsedConnector', connector.id());\n      }\n    }, err => {\n      console.error(err);\n      dispatch({\n        type: 'set_error',\n        error: new errors_1.ConnectorNotFoundError()\n      });\n    });\n  }, [autoConnect]);\n  const disconnect = (0, react_1.useCallback)(() => {\n    if (!state.connector) return;\n    state.connector.disconnect().then(() => {\n      dispatch({\n        type: 'set_account',\n        account: undefined\n      });\n      dispatch({\n        type: 'set_provider',\n        provider: undefined\n      });\n      dispatch({\n        type: 'set_connector',\n        connector: undefined\n      });\n      if (autoConnect) {\n        localStorage.removeItem('lastUsedConnector');\n      }\n    }, err => {\n      console.error(err);\n      dispatch({\n        type: 'set_error',\n        error: new errors_1.ConnectorNotFoundError()\n      });\n    });\n  }, [autoConnect, state.connector]);\n  (0, react_1.useEffect)(() => {\n    async function tryAutoConnect(connectors) {\n      const lastConnectedConnectorId = localStorage.getItem('lastUsedConnector');\n      if (lastConnectedConnectorId === null) {\n        return;\n      }\n      const lastConnectedConnector = connectors.find(connector => connector.id() === lastConnectedConnectorId);\n      if (lastConnectedConnector === undefined) {\n        return;\n      }\n      try {\n        if (!(await lastConnectedConnector.ready())) {\n          // Not authorized anymore.\n          return;\n        }\n        const account = await lastConnectedConnector.connect();\n        dispatch({\n          type: 'set_account',\n          account: account.address\n        });\n        dispatch({\n          type: 'set_provider',\n          provider: account\n        });\n        dispatch({\n          type: 'set_connector',\n          connector: lastConnectedConnector\n        });\n      } catch {\n        // no-op\n      }\n    }\n    if (autoConnect && !account) {\n      tryAutoConnect(connectors);\n    }\n    // Dependencies intentionally omitted since we only want\n    // this executed once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    account,\n    connect,\n    disconnect,\n    connectors,\n    library,\n    error\n  };\n}\n/** Root StarkNet context provider. */\nfunction StarknetProvider(_ref2) {\n  let {\n    children,\n    defaultProvider,\n    connectors,\n    autoConnect,\n    queryClient\n  } = _ref2;\n  const state = useStarknetManager({\n    defaultProvider,\n    connectors,\n    autoConnect\n  });\n  return (0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, {\n    client: queryClient ?? new react_query_1.QueryClient(),\n    children: (0, jsx_runtime_1.jsx)(StarknetContext.Provider, {\n      value: state,\n      children: children\n    })\n  });\n}\nexports.StarknetProvider = StarknetProvider;","map":{"version":3,"mappings":"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","names":["STARKNET_INITIAL_STATE","account","undefined","connect","disconnect","library","starknet_1","connectors","StarknetContext","useStarknet","exports","reducer","state","action","type","provider","connector","error","useStarknetManager","defaultProvider","userDefaultProvider","userConnectors","autoConnect","dispatch","then","address","localStorage","setItem","id","err","console","errors_1","removeItem","tryAutoConnect","lastConnectedConnectorId","getItem","lastConnectedConnector","find","ready","StarknetProvider","children","queryClient","react_query_1","client","Provider","value"],"sources":["../../src/providers/starknet.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}