{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useBlock = exports.useStarknetBlock = void 0;\nconst react_query_1 = require(\"@tanstack/react-query\");\nconst providers_1 = require(\"../providers\");\n/**\n * Hook for fetching a block.\n *\n * @remarks\n *\n * This hook fetches the `latest` block using the default provider.\n * Block data is continuously refreshed in the background.\n *\n * @deprecated Use {@link useBlock}.\n *\n * @example\n * This example shows how to fetch the latest block.\n * ```tsx\n * function Component() {\n *   const { data, loading, error } = useStarknetBlock()\n *\n *   if (loading) return <span>Loading...</span>\n *   if (error) return <span>Error...</span>\n *   return <span>Hash: {data.block_hash}</span>\n * }\n * ```\n */\nfunction useStarknetBlock() {\n  const {\n    data,\n    isLoading,\n    isError\n  } = useBlock({\n    blockIdentifier: 'latest'\n  });\n  return {\n    data,\n    loading: isLoading,\n    error: isError ? 'error loading block number' : undefined\n  };\n}\nexports.useStarknetBlock = useStarknetBlock;\n/**\n * Hook for fetching a block.\n *\n * @remarks\n *\n * Specify which block to fetch with the `blockIdentifier` argument.\n * Control if and how often data is refreshed with `refetchInterval`.\n *\n * @example\n * This example shows how to fetch the latest block only once.\n * ```tsx\n * function Component() {\n *   const { data, isLoading, isError } = useBlock({\n *     refetchInterval: false,\n *     blockIdentifier: 'latest'\n *   })\n *\n *   if (isLoading) return <span>Loading...</span>\n *   if (isError) return <span>Error...</span>\n *   return <span>Hash: {data.block_hash}</span>\n * }\n * ```\n *\n * @example\n * This example shows how to fetch the pending block every 3 seconds.\n * Use your browser network monitor to verify that the hook is refetching the\n * data.\n * ```tsx\n * function Component() {\n *   const { data, isLoading, isError } = useBlock({\n *     refetchInterval: 3000,\n *     blockIdentifier: 'pending'\n *   })\n *\n *   if (isLoading) return <span>Loading...</span>\n *   if (isError) return <span>Error...</span>\n *   return <span>Hash: {data.block_hash}</span>\n * }\n * ```\n */\nfunction useBlock() {\n  let {\n    refetchInterval,\n    onSuccess,\n    blockIdentifier = 'latest'\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    library\n  } = (0, providers_1.useStarknet)();\n  const {\n    data,\n    isLoading,\n    isError,\n    error\n  } = (0, react_query_1.useQuery)(['block', blockIdentifier], fetchBlock({\n    library,\n    args: {\n      blockIdentifier\n    }\n  }), {\n    refetchInterval,\n    useErrorBoundary: true,\n    onSuccess: block => {\n      if (block && onSuccess) onSuccess(block);\n    }\n  });\n  return {\n    data,\n    isLoading,\n    isError,\n    error\n  };\n}\nexports.useBlock = useBlock;\nfunction fetchBlock(_ref) {\n  let {\n    library,\n    args\n  } = _ref;\n  return async () => {\n    return await library.getBlock(args.blockIdentifier);\n  };\n}","map":{"version":3,"mappings":";;;;;;AAAA;AAGA;AAYA;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAgBA,gBAAgB;EAC9B,MAAM;IAAEC,IAAI;IAAEC,SAAS;IAAEC;EAAO,CAAE,GAAGC,QAAQ,CAAC;IAC5CC,eAAe,EAAE;GAClB,CAAC;EAEF,OAAO;IACLJ,IAAI;IACJK,OAAO,EAAEJ,SAAS;IAClBK,KAAK,EAAEJ,OAAO,GAAG,4BAA4B,GAAGK;GACjD;AACH;AAVAC;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,SAAgBL,QAAQ,GAIH;EAAA,IAJI;IACvBM,eAAe;IACfC,SAAS;IACTN,eAAe,GAAG;EAAQ,wEACT,EAAE;EACnB,MAAM;IAAEO;EAAO,CAAE,GAAG,2BAAW,GAAE;EAEjC,MAAM;IAAEX,IAAI;IAAEC,SAAS;IAAEC,OAAO;IAAEI;EAAK,CAAE,GAAG,0BAAQ,EAClD,CAAC,OAAO,EAAEF,eAAe,CAAC,EAC1BQ,UAAU,CAAC;IAAED,OAAO;IAAEE,IAAI,EAAE;MAAET;IAAe;EAAE,CAAE,CAAC,EAClD;IACEK,eAAe;IACfK,gBAAgB,EAAE,IAAI;IACtBJ,SAAS,EAAGK,KAAK,IAAI;MACnB,IAAIA,KAAK,IAAIL,SAAS,EAAEA,SAAS,CAACK,KAAK,CAAC;IAC1C;GACD,CACF;EACD,OAAO;IAAEf,IAAI;IAAEC,SAAS;IAAEC,OAAO;IAAEI;EAAK,CAAE;AAC5C;AAnBAE;AAqBA,SAASI,UAAU,OAMlB;EAAA,IANmB;IAClBD,OAAO;IACPE;EAAI,CAIL;EACC,OAAO,YAAW;IAChB,OAAO,MAAMF,OAAO,CAACK,QAAQ,CAACH,IAAI,CAACT,eAAe,CAAC;EACrD,CAAC;AACH","names":["useStarknetBlock","data","isLoading","isError","useBlock","blockIdentifier","loading","error","undefined","exports","refetchInterval","onSuccess","library","fetchBlock","args","useErrorBoundary","block","getBlock"],"sources":["../../src/hooks/block.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}