{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar React = require('react');\nvar useSyncExternalStore = require('./useSyncExternalStore');\nvar queryCore = require('@tanstack/query-core');\nvar QueryClientProvider = require('./QueryClientProvider.js');\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nfunction useIsMutating(arg1, arg2, arg3) {\n  const [filters, options = {}] = queryCore.parseMutationFilterArgs(arg1, arg2, arg3);\n  const queryClient = QueryClientProvider.useQueryClient({\n    context: options.context\n  });\n  const mutationCache = queryClient.getMutationCache();\n  return useSyncExternalStore.useSyncExternalStore(React__namespace.useCallback(onStoreChange => mutationCache.subscribe(queryCore.notifyManager.batchCalls(onStoreChange)), [mutationCache]), () => queryClient.isMutating(filters), () => queryClient.isMutating(filters));\n}\nexports.useIsMutating = useIsMutating;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBO,SAASA,aAAT,CACLC,IADK,EAELC,IAFK,EAGLC,IAHK,EAIG;EACR,MAAM,CAACC,OAAD,EAAUC,OAAO,GAAG,CAApB,KAA0BC,iCAAuB,CAACL,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAvD;EAEA,MAAMI,WAAW,GAAGC,kCAAc,CAAC;IAAEC,OAAO,EAAEJ,OAAO,CAACI;EAAnB,CAAD,CAAlC;EACA,MAAMC,aAAa,GAAGH,WAAW,CAACI,gBAAZ,EAAtB;EAEA,OAAOC,oBAAoB,sBACzBC,gBAAK,CAACC,WAAN,CACGC,aAAD,IACEL,aAAa,CAACM,SAAd,CAAwBC,SAAa,eAACC,UAAd,CAAyBH,aAAzB,CAAxB,CAFJ,EAGE,CAACL,aAAD,CAHF,CADyB,EAMzB,MAAMH,WAAW,CAACY,UAAZ,CAAuBf,OAAvB,CANmB,EAOzB,MAAMG,WAAW,CAACY,UAAZ,CAAuBf,OAAvB,CAPmB,CAA3B;AASD","names":["useIsMutating","arg1","arg2","arg3","filters","options","parseMutationFilterArgs","queryClient","useQueryClient","context","mutationCache","getMutationCache","useSyncExternalStore","React","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","isMutating"],"sources":["/Users/utkukoca/Desktop/Project-Challange/my-project/node_modules/@tanstack/react-query/src/useIsMutating.ts"],"sourcesContent":["import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationKey, MutationFilters } from '@tanstack/query-core'\nimport { notifyManager, parseMutationFilterArgs } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"script"}