{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTransactions = exports.useTransaction = void 0;\nconst react_query_1 = require(\"@tanstack/react-query\");\nconst providers_1 = require(\"../providers\");\n/**\n * Hook to fetch a single transaction.\n *\n * @remarks\n *\n * This hook keeps a cache of transactions by chain and transaction hash\n * so that you can use the hook freely in your application without worrying\n * about sending duplicate network requests.\n *\n * @example\n * This hook shows how to fetch a transaction.\n * ```tsx\n * function Component() {\n *   const { data, loading, error } = useTransaction({ hash: txHash })\n *\n *   if (loading) return <span>Loading...</span>\n *   if (error) return <span>Error: {JSON.stringify(error)}</span>\n *   return <span>{data.transaction_hash}</span>\n * }\n */\nfunction useTransaction(_ref) {\n  let {\n    hash\n  } = _ref;\n  const {\n    library\n  } = (0, providers_1.useStarknet)();\n  const {\n    data,\n    isLoading,\n    error\n  } = (0, react_query_1.useQuery)(queryKey({\n    library,\n    hash\n  }), fetchTransaction({\n    library,\n    hash\n  }));\n  return {\n    data,\n    loading: isLoading,\n    error: error ?? undefined\n  };\n}\nexports.useTransaction = useTransaction;\n/**\n * Hook to fetch a list of transactions in parallel.\n *\n * @remarks\n *\n * This hook fetches a dynamic list of transactions without\n * violating the rules of hooks.\n *\n * @example\n * This example shows how to fetch a list of transactions.\n * ```tsx\n * function Component() {\n *   const results = useTransactions({\n *     hashes: [txHash, txHash2]\n *   })\n *\n *   return (\n *     <ul>\n *       {results.map(({ data }, i) => (\n *         <li key={i}>\n *         {data ? data.transaction_hash : 'Loading...'}\n *         </li>\n *       ))}\n *     </ul>\n *   )\n * }\n * ```\n */\nfunction useTransactions(_ref2) {\n  let {\n    hashes\n  } = _ref2;\n  const {\n    library\n  } = (0, providers_1.useStarknet)();\n  const result = (0, react_query_1.useQueries)({\n    queries: hashes.map(hash => ({\n      queryKey: queryKey({\n        library,\n        hash\n      }),\n      queryFn: fetchTransaction({\n        library,\n        hash\n      })\n    }))\n  });\n  return result.map(_ref3 => {\n    let {\n      data,\n      isLoading,\n      error\n    } = _ref3;\n    return {\n      data,\n      loading: isLoading,\n      error: error ?? undefined\n    };\n  });\n}\nexports.useTransactions = useTransactions;\nfunction queryKey(_ref4) {\n  let {\n    library,\n    hash\n  } = _ref4;\n  return [{\n    entity: 'transaction',\n    chainId: library.chainId,\n    hash: hash\n  }];\n}\nfunction fetchTransaction(_ref5) {\n  let {\n    library,\n    hash\n  } = _ref5;\n  return async () => {\n    if (!hash) throw new Error('hash is required');\n    return await library.getTransaction(hash);\n  };\n}","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAkBA;;;;;;;;;;;;;;;;;;;;AAoBA,SAAgBA,cAAc,OAA8B;EAAA,IAA7B;IAAEC;EAAI,CAAuB;EAC1D,MAAM;IAAEC;EAAO,CAAE,GAAG,2BAAW,GAAE;EACjC,MAAM;IAAEC,IAAI;IAAEC,SAAS;IAAEC;EAAK,CAAE,GAAG,0BAAQ,EACzCC,QAAQ,CAAC;IAAEJ,OAAO;IAAED;EAAI,CAAE,CAAC,EAC3BM,gBAAgB,CAAC;IAAEL,OAAO;IAAED;EAAI,CAAE,CAAC,CACpC;EACD,OAAO;IAAEE,IAAI;IAAEK,OAAO,EAAEJ,SAAS;IAAEC,KAAK,EAAEA,KAAK,IAAII;EAAS,CAAE;AAChE;AAPAC;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAAgBC,eAAe,QAAiC;EAAA,IAAhC;IAAEC;EAAM,CAAwB;EAC9D,MAAM;IAAEV;EAAO,CAAE,GAAG,2BAAW,GAAE;EACjC,MAAMW,MAAM,GAAG,4BAAU,EAAC;IACxBC,OAAO,EAAEF,MAAM,CAACG,GAAG,CAAEd,IAAI,KAAM;MAC7BK,QAAQ,EAAEA,QAAQ,CAAC;QAAEJ,OAAO;QAAED;MAAI,CAAE,CAAC;MACrCe,OAAO,EAAET,gBAAgB,CAAC;QAAEL,OAAO;QAAED;MAAI,CAAE;KAC5C,CAAC;GACH,CAAC;EAEF,OAAOY,MAAM,CAACE,GAAG,CAAC;IAAA,IAAC;MAAEZ,IAAI;MAAEC,SAAS;MAAEC;IAAK,CAAE;IAAA,OAAM;MACjDF,IAAI;MACJK,OAAO,EAAEJ,SAAS;MAClBC,KAAK,EAAEA,KAAK,IAAII;KACjB;EAAA,CAAC,CAAC;AACL;AAdAC;AAgBA,SAASJ,QAAQ,QAAiE;EAAA,IAAhE;IAAEJ,OAAO;IAAED;EAAI,CAAiD;EAChF,OAAO,CACL;IACEgB,MAAM,EAAE,aAAa;IACrBC,OAAO,EAAEhB,OAAO,CAACgB,OAAO;IACxBjB,IAAI,EAAEA;GACP,CACO;AACZ;AAEA,SAASM,gBAAgB,QAAiE;EAAA,IAAhE;IAAEL,OAAO;IAAED;EAAI,CAAiD;EACxF,OAAO,YAAW;IAChB,IAAI,CAACA,IAAI,EAAE,MAAM,IAAIkB,KAAK,CAAC,kBAAkB,CAAC;IAC9C,OAAO,MAAMjB,OAAO,CAACkB,cAAc,CAACnB,IAAI,CAAC;EAC3C,CAAC;AACH","names":["useTransaction","hash","library","data","isLoading","error","queryKey","fetchTransaction","loading","undefined","exports","useTransactions","hashes","result","queries","map","queryFn","entity","chainId","Error","getTransaction"],"sources":["../../src/hooks/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}