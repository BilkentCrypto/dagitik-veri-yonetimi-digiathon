{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWalletObj = exports.getInstalledInjectedConnectors = exports.InjectedConnector = void 0;\nconst base_1 = require(\"./base\");\nconst errors_1 = require(\"../errors\");\nclass InjectedConnector extends base_1.Connector {\n  constructor(_ref) {\n    let {\n      options\n    } = _ref;\n    super({\n      options\n    });\n  }\n  available() {\n    this.ensureWallet();\n    return this._wallet !== undefined;\n  }\n  async ready() {\n    this.ensureWallet();\n    if (!this._wallet) return false;\n    return await this._wallet.isPreauthorized();\n  }\n  async connect() {\n    this.ensureWallet();\n    if (!this._wallet) {\n      throw new errors_1.ConnectorNotFoundError();\n    }\n    try {\n      await this._wallet.enable();\n    } catch {\n      // NOTE: Argent v3.0.0 swallows the `.enable` call on reject, so this won't get hit.\n      throw new errors_1.UserRejectedRequestError();\n    }\n    if (!this._wallet.isConnected) {\n      // NOTE: Argent v3.0.0 swallows the `.enable` call on reject, so this won't get hit.\n      throw new errors_1.UserRejectedRequestError();\n    }\n    return this._wallet.account;\n  }\n  async disconnect() {\n    this.ensureWallet();\n    if (!this.available()) {\n      throw new errors_1.ConnectorNotFoundError();\n    }\n    if (!this._wallet?.isConnected) {\n      throw new errors_1.UserNotConnectedError();\n    }\n  }\n  async account() {\n    this.ensureWallet();\n    if (!this._wallet) {\n      throw new errors_1.ConnectorNotConnectedError();\n    }\n    if (!this._wallet.account) {\n      return null;\n    }\n    return this._wallet.account;\n  }\n  id() {\n    return this.options.id;\n  }\n  name() {\n    this.ensureWallet();\n    if (!this._wallet) {\n      throw new errors_1.ConnectorNotConnectedError();\n    }\n    return this._wallet.name;\n  }\n  ensureWallet() {\n    const installed = getInstalledWallets();\n    const wallet = installed[this.options.id];\n    if (wallet) {\n      this._wallet = wallet;\n    }\n  }\n}\nexports.InjectedConnector = InjectedConnector;\n/**\n * Returns all injected connectors installed by the user.\n *\n * @remarks\n *\n * Because of how wallets are injected in the window context, this\n * function is not guaranteed to return the actual installed wallets.\n *\n * @deprecated\n *\n * Don't use this function for new applications, manually specify the supported\n * wallets instead.\n */\nfunction getInstalledInjectedConnectors() {\n  const installed = Object.keys(getInstalledWallets());\n  const shuffled = shuffle(installed);\n  return shuffled.map(id => new InjectedConnector({\n    options: {\n      id\n    }\n  }));\n}\nexports.getInstalledInjectedConnectors = getInstalledInjectedConnectors;\n// The code below comes from get-starknet and it's just to show what\n// we need from that library\nfunction getInstalledWallets() {\n  // no browser wallets on server\n  if (typeof window === 'undefined') {\n    return {};\n  }\n  return Object.getOwnPropertyNames(window).reduce((wallets, key) => {\n    if (key.startsWith('starknet')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const wallet = window[key];\n      if ((0, exports.isWalletObj)(key, wallet) && !wallets[wallet.id]) {\n        wallets[wallet.id] = wallet;\n      }\n    }\n    return wallets;\n  }, {});\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isWalletObj = (key, wallet) => {\n  try {\n    if (wallet && [\n    // wallet's must have methods/members, see IStarknetWindowObject\n    'request', 'isConnected', 'provider', 'enable', 'isPreauthorized', 'on', 'off', 'version'].every(key => key in wallet)) {\n      if (key === 'starknet' && (!wallet.id || !wallet.name || !wallet.icon)) {\n        wallet.name = 'Argent X';\n        wallet.icon = '';\n      }\n      // test for new fields only after attempting\n      // to enrich the legacy wallet ->\n      return ['id', 'name', 'icon'].every(key => key in wallet);\n    }\n    // eslint-disable-next-line no-empty\n  } catch (err) {}\n  return false;\n};\nexports.isWalletObj = isWalletObj;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst shuffle = arr => {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};","map":{"version":3,"mappings":"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","names":["InjectedConnector","base_1","constructor","options","available","ensureWallet","_wallet","undefined","ready","isPreauthorized","connect","errors_1","enable","isConnected","account","disconnect","id","name","installed","getInstalledWallets","wallet","exports","getInstalledInjectedConnectors","Object","keys","shuffled","shuffle","map","window","getOwnPropertyNames","reduce","wallets","key","startsWith","isWalletObj","every","icon","err","arr","i","length","j","Math","floor","random"],"sources":["../../src/connectors/injected.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}