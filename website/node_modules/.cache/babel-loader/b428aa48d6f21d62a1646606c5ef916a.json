{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTransactionReceipt = void 0;\nconst react_query_1 = require(\"@tanstack/react-query\");\nconst react_1 = require(\"react\");\nconst providers_1 = require(\"../providers\");\nconst invalidate_1 = require(\"./invalidate\");\n/**\n * Hook to fetch a single transaction receipt.\n *\n * @remarks\n *\n * This hook keeps a cache of receipts by chain and transaction hash\n * so that you can use the hook freely in your application without worrying\n * about sending duplicate network requests.\n *\n * If you need to refresh the transaction receipt data, set `watch: true` in\n * the props. The hook will periodically refresh the transaction data in the\n * background.\n *\n * @example\n * This hook shows how to fetch a transaction receipt.\n * ```tsx\n * function Component() {\n *   const { data, loading, error } = useTransactionReceipt({ hash: txHash })\n *\n *   if (loading) return <span>Loading...</span>\n *   if (error) return <span>Error: {JSON.stringify(error)}</span>\n *   return <span>{data.status}</span>\n * }\n * ```\n *\n * @example\n * This example shows how to submit a transaction and load its status.\n * ```tsx\n * function Component() {\n *   const { address } = useAccount()\n *   const [hash, setHash] = useState(undefined)\n *\n *   const { data, loading, error } = useTransactionReceipt({ hash, watch: true })\n *\n *   const { execute } = useStarknetExecute({\n *     calls: [{\n *       contractAddress: ethAddress,\n *       entrypoint: 'transfer',\n *       calldata: [address, 1, 0]\n *     }]\n *   })\n *\n *   const handleClick = () => {\n *     execute().then(tx => setHash(tx.transaction_hash))\n *   }\n *\n *   return (\n *     <div>\n *       <button onClick={handleClick}>Submit tx</button>\n *       <div>Hash: {hash}</div>\n *       {loading && <div>Loading...</div>}\n *       {error && <div>Error: {JSON.stringify(error)}</div>}\n *       {data && <div>Status: {data.status}</div>}\n *     </div>\n *   )\n * }\n * ```\n */\nfunction useTransactionReceipt(_ref) {\n  let {\n    hash,\n    watch\n  } = _ref;\n  const {\n    library\n  } = (0, providers_1.useStarknet)();\n  const queryKey_ = (0, react_1.useMemo)(() => queryKey({\n    library,\n    hash\n  }), [library, hash]);\n  const {\n    data,\n    isLoading,\n    error,\n    refetch\n  } = (0, react_query_1.useQuery)(queryKey_, fetchTransactionReceipt({\n    library,\n    hash\n  }), {\n    enabled: !!hash,\n    refetchInterval: (data, _query) => watch ? refetchInterval(data) : false\n  });\n  (0, invalidate_1.useInvalidateOnBlock)({\n    enabled: watch,\n    queryKey: queryKey_\n  });\n  return {\n    data,\n    loading: isLoading,\n    error: error ?? undefined,\n    refresh: refetch\n  };\n}\nexports.useTransactionReceipt = useTransactionReceipt;\nfunction queryKey(_ref2) {\n  let {\n    library,\n    hash\n  } = _ref2;\n  return [{\n    entity: 'transactionReceipt',\n    chainId: library.chainId,\n    hash\n  }];\n}\nfunction fetchTransactionReceipt(_ref3) {\n  let {\n    library,\n    hash\n  } = _ref3;\n  return async () => {\n    if (!hash) throw new Error('hash is required');\n    return await library.getTransactionReceipt(hash);\n  };\n}\nfunction refetchInterval(data) {\n  if (data?.status === 'NOT_RECEIVED') return 500;\n  if (data?.status === 'RECEIVED') return 5000;\n  if (data?.status === 'PENDING') return 5000;\n  if (data?.status === 'ACCEPTED_ON_L2') return 60000;\n  if (data?.status === 'REJECTED') return false;\n  if (data?.status === 'ACCEPTED_ON_L1') return false;\n  return false;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA,SAAgBA,qBAAqB,OAGR;EAAA,IAHS;IACpCC,IAAI;IACJC;EAAK,CACsB;EAC3B,MAAM;IAAEC;EAAO,CAAE,GAAG,2BAAW,GAAE;EACjC,MAAMC,SAAS,GAAG,mBAAO,EAAC,MAAMC,QAAQ,CAAC;IAAEF,OAAO;IAAEF;EAAI,CAAE,CAAC,EAAE,CAACE,OAAO,EAAEF,IAAI,CAAC,CAAC;EAC7E,MAAM;IAAEK,IAAI;IAAEC,SAAS;IAAEC,KAAK;IAAEC;EAAO,CAAE,GAAG,0BAAQ,EAClDL,SAAS,EACTM,uBAAuB,CAAC;IAAEP,OAAO;IAAEF;EAAI,CAAE,CAAC,EAC1C;IACEU,OAAO,EAAE,CAAC,CAACV,IAAI;IACfW,eAAe,EAAE,CAACN,IAAI,EAAEO,MAAM,KAAMX,KAAK,GAAGU,eAAe,CAACN,IAAI,CAAC,GAAG;GACrE,CACF;EAED,qCAAoB,EAAC;IAAEK,OAAO,EAAET,KAAK;IAAEG,QAAQ,EAAED;EAAS,CAAE,CAAC;EAE7D,OAAO;IAAEE,IAAI;IAAEQ,OAAO,EAAEP,SAAS;IAAEC,KAAK,EAAEA,KAAK,IAAIO,SAAS;IAAEC,OAAO,EAAEP;EAAO,CAAE;AAClF;AAlBAQ;AAoBA,SAASZ,QAAQ,QAAiE;EAAA,IAAhE;IAAEF,OAAO;IAAEF;EAAI,CAAiD;EAChF,OAAO,CAAC;IAAEiB,MAAM,EAAE,oBAAoB;IAAEC,OAAO,EAAEhB,OAAO,CAACgB,OAAO;IAAElB;EAAI,CAAE,CAAU;AACpF;AAEA,SAASS,uBAAuB,QAAiE;EAAA,IAAhE;IAAEP,OAAO;IAAEF;EAAI,CAAiD;EAC/F,OAAO,YAAW;IAChB,IAAI,CAACA,IAAI,EAAE,MAAM,IAAImB,KAAK,CAAC,kBAAkB,CAAC;IAC9C,OAAO,MAAMjB,OAAO,CAACkB,qBAAqB,CAACpB,IAAI,CAAC;EAClD,CAAC;AACH;AAEA,SAASW,eAAe,CAACN,IAA+C;EACtE,IAAIA,IAAI,EAAEgB,MAAM,KAAK,cAAc,EAAE,OAAO,GAAG;EAC/C,IAAIhB,IAAI,EAAEgB,MAAM,KAAK,UAAU,EAAE,OAAO,IAAI;EAC5C,IAAIhB,IAAI,EAAEgB,MAAM,KAAK,SAAS,EAAE,OAAO,IAAI;EAC3C,IAAIhB,IAAI,EAAEgB,MAAM,KAAK,gBAAgB,EAAE,OAAO,KAAK;EACnD,IAAIhB,IAAI,EAAEgB,MAAM,KAAK,UAAU,EAAE,OAAO,KAAK;EAC7C,IAAIhB,IAAI,EAAEgB,MAAM,KAAK,gBAAgB,EAAE,OAAO,KAAK;EACnD,OAAO,KAAK;AACd","names":["useTransactionReceipt","hash","watch","library","queryKey_","queryKey","data","isLoading","error","refetch","fetchTransactionReceipt","enabled","refetchInterval","_query","loading","undefined","refresh","exports","entity","chainId","Error","getTransactionReceipt","status"],"sources":["../../src/hooks/receipt.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}